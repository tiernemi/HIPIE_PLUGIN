/*
 * generated by Xtext
 */
package org.xtext.hipie.ui.contentassist

import org.xtext.hipie.ui.contentassist.AbstractHIPIEProposalProvider
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import javax.inject.Inject
import org.eclipse.xtext.ui.label.StylerFactory
import org.eclipse.xtext.ui.editor.utils.TextStyle
import org.eclipse.swt.graphics.RGB
import org.eclipse.swt.graphics.FontData
import org.eclipse.swt.SWT
import org.eclipse.jface.viewers.StyledString
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.Keyword
import org.xtext.hipie.hIPIE.OutDataset
import org.eclipse.xtext.naming.QualifiedName
import org.xtext.hipie.hIPIE.PosVizData
import org.xtext.hipie.hIPIE.NestedDatasetDecl
import org.xtext.hipie.hIPIE.Dataset
import org.xtext.hipie.hIPIE.Visualization
import org.xtext.hipie.hIPIE.VisualSection
import org.xtext.hipie.hIPIE.ECLFieldType
import org.xtext.hipie.hIPIE.FieldDecl
import org.xtext.hipie.hIPIE.ECLString
import org.xtext.hipie.hIPIE.ECLInteger
import org.xtext.hipie.hIPIE.ECLQstring
import org.xtext.hipie.hIPIE.ECLReal
import org.xtext.hipie.hIPIE.ECLUnicode
import org.xtext.hipie.hIPIE.ECLData
import org.xtext.hipie.hIPIE.ECLVarstring
import org.xtext.hipie.hIPIE.ECLVarunicode
import org.xtext.hipie.hIPIE.ECLUnsigned
import org.xtext.hipie.hIPIE.ECLBoolean
import org.xtext.hipie.hIPIE.ECLNumType
import org.xtext.hipie.hIPIE.ECLDecType

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class HIPIEProposalProvider extends AbstractHIPIEProposalProvider {

	@Inject
	private StylerFactory stylerFactory;

	def protected TextStyle getTypeTextStyle() {
		var textStyle = new TextStyle();
		textStyle.setColor(new RGB(125, 38, 205));
		textStyle.setFontData(new FontData("typefont", 9, SWT.NORMAL))
		textStyle.setStyle(SWT.NORMAL);
		return textStyle;
	}

	def protected TextStyle getCrossRefTextStyle() {
		var textStyle = new TextStyle()
		textStyle.setColor(new RGB(140, 140, 140));
		textStyle.setFontData(new FontData("basefont", 9, SWT.ITALIC))
		textStyle.setStyle(SWT.ITALIC);
		return textStyle;
	}

	def protected TextStyle getKeywordTextStyle() {
		var textStyle = new TextStyle()
		textStyle.setColor(new RGB(39, 64, 138));
		textStyle.setFontData(new FontData("keyfont", 10, SWT.BOLD))
		textStyle.setStyle(SWT.BOLD);
		return textStyle;
	}

	def protected TextStyle getBoldTextStyle() {
		var textStyle = new TextStyle()
		textStyle.setColor(new RGB(0, 0, 0));
		textStyle.setFontData(new FontData("keyfont", 10, SWT.BOLD))
		textStyle.setStyle(SWT.BOLD);
		return textStyle;
	}

	override completeKeyword(Keyword keyword, ContentAssistContext contentAssistContext,
		ICompletionProposalAcceptor acceptor) {
		var StyledString proposalString
		if (keyword.getValue().equals("-") || keyword.getValue().equals(",") || keyword.getValue().equals("(") ||
			keyword.getValue().equals(")") || keyword.getValue().equals("{") || keyword.getValue().equals("}"))
			return;
		if (keyword.value == ";" || keyword.value == ":")
			proposalString = new StyledString(keyword.value,
				stylerFactory.createXtextStyleAdapterStyler(getBoldTextStyle()))
		else
			proposalString = new StyledString(keyword.value,
				stylerFactory.createXtextStyleAdapterStyler(getKeywordTextStyle()))
		var proposal = createCompletionProposal(keyword.getValue(), proposalString, getImage(keyword),
			contentAssistContext)
		getPriorityHelper().adjustKeywordPriority(proposal, contentAssistContext.getPrefix())
		acceptor.accept(proposal)
	}

	override completeVisBasis_Basis(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeVisBasis_Basis(model, assignment, context, acceptor)
	}

	override protected StyledString getStyledDisplayString(EObject element, String qualifiedName, String shortName) {
		var qualName = getQualifiedName(element, qualifiedName, shortName)
		var name = new StyledString(qualName.lastSegment)
		var qualNameString = qualName.toString
		var type = new StyledString()
		var typestring = ""

		if (element instanceof PosVizData) {
			var obj = element as PosVizData
			if (element instanceof ECLFieldType) {
				var cont = obj.eContainer.eContainer
				switch element {
					case element instanceof ECLString: typestring = 'STRING'
					case element instanceof ECLInteger: typestring = 'INTEGER'
					case element instanceof ECLQstring: typestring = 'QSTRING'
					case element instanceof ECLReal: typestring = 'REAL'
					case element instanceof ECLUnicode: typestring = 'UNICODE'
					case element instanceof ECLData: typestring = 'DATA'
					case element instanceof ECLVarstring: typestring = 'VARSTRING'
					case element instanceof ECLVarunicode: typestring = 'VARUNICODE'
					case element instanceof ECLUnsigned: typestring = 'UNSIGNED'
					case element instanceof ECLBoolean: typestring = 'BOOL'
					case element instanceof ECLNumType: typestring = (element as ECLNumType).type
					case element instanceof ECLDecType: typestring = (element as ECLDecType).type
				}
				while (cont instanceof OutDataset || cont instanceof NestedDatasetDecl || cont instanceof Dataset) {
					if (cont instanceof OutDataset) {
						var dataset = cont as OutDataset
						qualNameString = "OUTPUTS." + dataset.name + "." + qualNameString
					}
					if (cont instanceof NestedDatasetDecl) {
						var dataset = cont as NestedDatasetDecl
						qualNameString = dataset.name + "." + qualNameString
					}
					cont = cont.eContainer.eContainer
				}
			}
			if (element instanceof FieldDecl) {
				var cont = obj.eContainer
				typestring = "FIELD"
				if (cont instanceof Dataset) {
					var dataset = cont as Dataset
					qualNameString = "INPUTS." + dataset.name + "." + qualNameString
				}
			}
		}

		if (element instanceof Visualization) {
			var viz = element.eContainer as VisualSection
			typestring = (element as Visualization).type
			qualNameString = viz.name + "." + qualName.toString
		}

		if (element instanceof OutDataset) {
			var data = element as OutDataset
			typestring = data.type
		}

		if (element instanceof Dataset) {
			var data = element as Dataset
			typestring = data.type
		}

		var qualSec = new StyledString(" - " + qualNameString,
			stylerFactory.createXtextStyleAdapterStyler(getCrossRefTextStyle()))
		if (typestring != "")
			type = new StyledString(" : " + typestring, stylerFactory.createXtextStyleAdapterStyler(getTypeTextStyle()))
		return name.append(type).append(qualSec)
	}

	protected def QualifiedName getQualifiedName(EObject element, String qualifiedName, String shortName) {
		var qualifiedNameAsString = qualifiedName
		if (qualifiedNameAsString == null)
			qualifiedNameAsString = shortName
		if (qualifiedNameAsString == null) {
			if (element != null)
				qualifiedNameAsString = labelProvider.getText(element)
			else
				return null
		}
		return qualifiedNameConverter.toQualifiedName(qualifiedNameAsString)
	}

}
