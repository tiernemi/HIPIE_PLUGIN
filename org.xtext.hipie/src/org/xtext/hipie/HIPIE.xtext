grammar org.xtext.hipie.HIPIE with org.eclipse.xtext.common.Terminals 

generate hIPIE "http://www.xtext.org/hipie/HIPIE"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
 
Program :
	(composition_header=CompositionHeader)? 
	(base_props+=BaseProp)+ 
	(permissions=Permissions)? 
	(input_section=InputSection)?
	(contract_instances+=ContractInstance)* 
	(output_section=OutputSection)?
	(integrate_section=IntegrateSection)?
	(visual_section+=VisualSection)* 
	(generate_section=GenerateSection)? 
	(custom_section=CustomSection)? 
	(resource_section=ResourceSection)?
;
 
BaseProp: 
	(property=('NAME' | 'DESCRIPTION' | 'AUTHOR' | 'LICENSE' | 'COPYRIGHT' | 'VERSION' | 'LABEL' | 'ID' | 'TEMPLATE' ) val_list=ValueList ';')|
	(property='CATEGORY' cat_list=CategoryTypeList ';')
;
   
CategoryType: 
	category_type=('CLEAN' | 'INPUT' | 'APPEND' | 'LINK' | 'ANALYSIS' | 'CUSTOM' | 'VISUALIZE' | 'OUTPUT')
;

CategoryTypeList: 
	categories+=CategoryType ( ',' categories+=CategoryType)*
;

Value: 
	name=UTOKEN|name=TOKEN|int_val=INT|str_val=STRING
;

ValueList: 
	vals+=Value ( ',' vals+=Value )*
;

TOKEN :
	ID
;

UTOKEN :
	'_'ID
;

TOKEN_list: 
	TOKEN ( ',' TOKEN )*
;

Assign: 
	val_l=Value '=' vals_r=ValueList
;

AssignList: 
	assigns+=Assign ( ',' assigns+=Assign)*
;

CompositionHeader: 
	{CompositionHeader} 'HEADER' (assigns+=Assign)* -> 'END'
;

InstanceID: 
	'(' name=TOKEN ')'
;

InstanceOptions: 
	':' in_ops+=InstanceOption ( ',' in_ops+=InstanceOption )*
;

InstanceOption: 
	option=('LABEL'|'VERSION') '(' val_list=ValueList ')'
;

ContractInstance: 
	'INSTANCE' name=TOKEN instId=InstanceID options=InstanceOptions? (assigns+=Assign)* -> 'END'
;

FieldDecl: 
	type='FIELD' name=TOKEN (options=InputOptions)? ';'
;

KelAttrDecl: 
	type='ATTRIBUTE' name=TOKEN options=InputOptions? ';'
;

KelEntityDeclSimple: 
	type='ENTITY' name=TOKEN options=InputOptions? ';'
;

KelEntityDecl: 
	type='ENTITY' name=TOKEN options=InputOptions? attrdecl=KelAttrDecl? 'END'
;

EnumEntry: 
	val_l=Value ( '=' val_r=Value)?
;

EnumList: 
	en_ents+=EnumEntry ( ',' en_ents+=EnumEntry)*
;

EnumDecl: 
	type='ENUM' '(' enum_list=EnumList ')'
;
 
InputSection: 
	name='INPUTS' (inputs+=InputValue)+ -> 'END'
;

Bool:
	type='BOOL' name=TOKEN
;

IntVar:
	type='INT' name=TOKEN
;

StringVar:
	type='STRING' name=TOKEN
;

Dataset:
	type='DATASET' name=TOKEN (options=InputOptions)? (';'|((fields+=FieldDecl)* 'END'))
;

Group:
	type='GROUP' name=TOKEN (input_op_list=InputOptions)? (vals+=InputValue)* 'END'
;

Real :
	type='REAL' name=TOKEN
;

InputSimpleTypes : 
	Bool|IntVar|EnumDecl|StringVar|Real
;

Record :
	type='RECORD' name=TOKEN
;

KelBase :
	type='KELBASE' name=TOKEN (options=InputOptions)? (kels+=(KelEntityDecl|KelEntityDeclSimple|KelAttrDecl))* 'END'
;

Datatype :
(Record | Dataset | KelBase | Group)
;

InputValue: 
	(in_val=(InputSimpleTypes|Record) (options=InputOptions)? ';')  |
     in_val=Dataset  |
     in_val=KelBase   |
     in_val=Group
; 
 
InputOptions:
	':' input_ops+=InputOption ( ',' input_ops+=InputOption )*
;

InputOption:
	  atr=('OPTIONAL'|'DEFINED'|'DISABLED'|'MAPBYTYPE'|'MAPBYNAME'|'MANY') |
		atr='FORMFIELD' '(' form_op=FormfieldOption ')' | 
		atr='ENABLE' '('  (assigns_list=AssignList)  ')' | 
        atr='TYPE' '(' type_op=InputtypeOptions ')' | 
        atr=('RANGE'|'DEFAULT'|'MAXLENGTH'|'DISABLED' |'DESCRIPTION' |'NULL'|'FIELDLENGTH'|'ROWS'|'COLS'|'_HTML_STYLECLASS'|'LABEL') '(' vals+=ValueList ')'
;

FormfieldOption: 
	selec=('CHECKBOX'|'RADIO'|'SELECT'|'MULTIPLESELECT'|'TEXTAREA'|'HIDDEN'|'TEXT')
;

InputtypeOption: 
	in_type=('UNICODE'|'UNISTR'|'INTEGER'|'DECIMAL'|'NUMERIC'|'REAL'|'STRING')
;

InputtypeOptions: 
	in_type_op+=InputtypeOption ( ',' in_type_op+=InputtypeOption )*
;


IntegrateSection: 
	{IntegrateSection} 'INTEGRATE' (outputs+=OutputValue)+ 'END'
;

OutputSection : 
	name='OUTPUTS' (outputs+=OutputValue)+ 'END'
;

OutfieldDecl : 
	decl=(IntVar|Bool|StringVar|FieldDecl) 
;

ECLInteger :
	'INTEGER' INT? name=TOKEN
;

ECLUnsigned :
	'UNSIGNED' INT? name=TOKEN
;

// Bug type=STRING Not sure why this causes syntax to break

ECLString :
	"STRING" INT? name=TOKEN
;

ECLQstring :
	'QSTRING' INT? name=TOKEN
;

ECLVarstring :
	'VARSTRING' INT? name=TOKEN
;

ECLUnicode :
	'UNICODE' INT? name=TOKEN
;

ECLVarunicode:
	'VARUNICODE' INT? name=TOKEN
;

ECLData :
	'DATA' name=TOKEN
;

ECLReal :
	'REAL' name=TOKEN
;

ECLBoolean :
	'BOOL' name=TOKEN
;

ECLNumType :
	type=ECLNUMBEREDTYPE INT? name=TOKEN
;

ECLDecType :
	type=ECLDECIMALTYPE INT? name=TOKEN
;
                   
ECLFieldType: 
	( ECLInteger | ECLQstring | ECLString |  ECLReal | ECLUnicode | ECLData | ECLVarstring | ECLVarunicode | ECLUnsigned | ECLNumType | ECLDecType | ECLBoolean)
;

ECLOutputDecl: 
	(ecl_field_type=ECLFieldType (options=OutputOptions)? ';') | nest=NestedDatasetDecl
;

ServiceInputValue: 
	ecl_field_type=ECLFieldType (options=InputOptions)? ';' | nest=NestedDatasetDecl
;

ServiceInputSection: 
	'INPUTS' (servs+=ServiceInputValue)+ 'END'
;

NestedDatasetDecl:
	type='DATASET' name=TOKEN (ops=OutputOptions)? (ecl_decls+=ECLOutputDecl)+ => 'END'
;
				
OutputOption: 
	type=('SIDE'|'LARGE'|'SMALL'|'FEW'|'WUID'|'APPEND'|'SCOREDSEARCH'|'DATABOMB'|'OPTIONAL') | 
    (atr=('WUID'|'FROM') '(' name=TOKEN ')') |
    (atr='ENABLE' '(' assigns=AssignList ')') |
    (atr='PREFIX' '(' (name=TOKEN) ')') |
    (atr=('WUID'|'FILLS'|'SOAP') '(' vals=ValueList ')') |
    (atr=('DESCRIPTION'|'SOAP'|'JSON'|'ROXIE'|'XPATH') '(' vals=Value ')')
;
                
OutputOptions: 
	':' output_ops+=OutputOption ( ',' output_ops+=OutputOption )*
;


OutTypeSimple :
	type=('BOOL'|'INT'|'STRING'|'ACTION')? vals=Value 
;

OutDataset :
	type='DATASET' name=TOKEN (out_base=OutputBase)? (ops=OutputOptions)? (';'|(ecl_decls+=ECLOutputDecl)* 'END')
;

Service :
	type='SERVICE' name=(TOKEN|UTOKEN) (ops=OutputOptions) (serv=ServiceInputSection)? (';'|(ecl_decls+=ECLOutputDecl)* 'END')   
;

OutputValue: 
 (out_val=OutTypeSimple  ';') |     
    out_val=OutDataset  |
    out_val=Service
;
 
OutputBase:  
	'(' base=[Datatype|TOKEN] ')'
;
 
Permissions: 
	{Permissions} 'PERMISSIONS' (perms+=Permission)* 'END'
;

Permission: 
	type=('VIEW'|'EDIT'|'RUN') ':' ('PUBLIC'|'PRIVATE'|cust_levs+=CustomPermissionLevel (',' cust_levs+=CustomPermissionLevel
	)?) ';'
;

CustomPermissionLevel:
	('USER'|'GROUP') '(' vals+=Value (',' vals+=Value)* ')'
; 
 
               
GenerateSection: 
	 body=(GenerateBodyInline | GenerateBodySalt | GenerateBodyKel)
;
   
GenerateBodyInline : 
	'GENERATES' type=GEN_BLOCK
;  

GenerateBodySalt :
	'GENERATES' type='SALT' '(' name=TOKEN ')' ':' op=('SCOREDSEARCH'|'PROFILE') => 'ENDGENERATES'               
;

GenerateBodyKel :
	'GENERATES' type='KEL' '(' name=TOKEN ')' => 'ENDGENERATES' 
;

VisualSection: 
	type='VISUALIZE' name=TOKEN (ops=VisualSectionOptions)? (vis_elements+=Visualization)+ => 'END'
;

VisName :
	('CHORO'|'LINE'|'TIMELINE'|'PIE'|'BAR'|'TABLE'|'GRAPH'|'FORM'|'GROUP'|'SLIDER')
;

VisInputValue:
	types=InputSimpleTypes (in_ops=InputOptions)? ';'
;

VisBasisParens:
	'(' input=VisBasis ')'
;

Visualization: 
	type=VisName name=TOKEN  (parens=VisBasisParens)? (vis_op=VisualOptions)? ';' |
    type=VisName name=TOKEN (parens=VisBasisParens)? (vis_op=VisualOptions)? (input_val+=VisInputValue)+ => 'END' 
;

VisBasis: 
	basis=[OutDataset|TOKEN] (filter=VisFilter)? (quals=VisBasisQualifiers)?
;

VisFilter :
	'(' + vals+=Value + ')'
;

VisBasisQualifiers: 
	'{' funcs=Function ( ',' qfuncs+=QFunction )* '}'
;

PosVizData : 
	types=(ECLFieldType | FieldDecl)
;

Function: 
	/*vars=[PosVizData] |*/  vals=Value |
	/*'-' vars=[PosVizData] |*/  '-' vals=Value |
    AggFunction | '-' AggFunction |
    CountFunction | '-' CountFunction |
    'SCALE' '(' (/*(vars=[PosVizData])|*/CountFunction|AggFunction) ',' type=INT ')'
;

QFunction:
	Function|NestBasisQualifier
;

NestBasisQualifier: 
	(TOKEN) VisBasisQualifiers
;

CountFunction: 
	'COUNT'
;

AggFunction:
	('SUM'|'AVE'|'MAX'|'MIN') '(' TOKEN  ')'
;
    
VisualSectionOptions: 
	':' vis_ops+=VisualSectionOption ( ',' vis_ops+=VisualSectionOption )*
;

VisualSectionOption: 
	(name='LABEL'|name='TITLE') '(' vals=Value ')' | 
	name='ENABLE' '(' assigns=AssignList ')' |
	(name='EXPLORE' | name='PRIMARY')
;

VizAssign: 
	val_l=Value '=' val_r=ValueList
;

VizAssignList: 
	assigns+=VizAssign ( ',' assigns+=VizAssign)*
;

VizEnumDecl: 
	name='ENUM' '(' assigns=VizAssignList ')'
;

VisualOptions: 
	':' vis_ops+=VisualOption ( ',' vis_ops+=VisualOption )*
;

VisualOption: 
	(name='TITLE'|name='DATE'|name='DESCRIPTION'|name='PICTURE'|name='STATE'|name='COUNTY'|name='FIRST'|name='WEIGHT'|name='SIZE'|name='LEVELS'|name='LEVEL'|name='UID'|name='TYPE') '(' funcs+=Function ')' |
    (name='ICON'|name='FLAG'|name='TYPE') '(' funcs+=Function (',' decl=VizEnumDecl)? ')' |
    vis_cust=VisualCustomOption |
    name='COLLAPSE' | 
    name='VISIBILITY' '(' visibility_op=VisibilityOption ')' |
    name='ENABLE' '(' assigns+=AssignList ')' |
    VisualCustomOption '(' funcs+=Function ( ',' funcs+=Function)* ')' |
    VisualMultival '(' funcs+=Function ( ',' funcs+=Function )* ')'|
    SelectOption |
    LinkOption
;
               
SelectEvent:
	Value
;

SelectOptionMapping:
	(TOKEN) '->' TOKEN ( ',' TOKEN )*
;

SelectOption:
	'SELECTS' '(' (SelectEvent ',')? maps+=SelectOptionMapping (',' maps+=SelectOptionMapping)* ')' 
;

LinkOption:
	'LINK' '(' name=TOKEN ( ',' ops+=VisualOption )* ')'
;                         
               
VisualMultival: 
	(name='X'|name='Y'|name='COLOR'|name='RANGE'|name='FILTER'|name='LABEL'|name='VALUE'|name='SORT'|name='BRANCHES')
;

VisibilityOption:
	(name='MODAL'|name='VISIBLE')
;

VisualCustomOption:
	name=TOKEN
;
        
CustomSection: 
	{CustomSection} 'CUSTOM' (cust_vals+=CustomValue)* 'END'
;

CustomValue:
	name=TOKEN vals=Value ';'
;

ResourceType:
	type=('LOGICALFILE'|'INDEX'|'SUPERFILE'|'ECL'|'FILE'|'IMAGE')
;

ResourceOption: 
	 ('FONT'|'VALUE'|'DESCRIPTION' |'FILENAME' |'LABEL'|'URL'|'DALIIP'|'CLUSTER'|VisualCustomOption) '(' vals=Value ')'
;

ResourceOptions: 
	res_ops+=ResourceOption ( ',' res_ops+=ResourceOption )*
;

ResourceValue: 
	res_type=ResourceType name=TOKEN (':' res_ops=ResourceOptions)? ';'
;

ResourceSection: 
	'RESOURCES' (res_vals+=ResourceValue)+ 'END'
;

terminal WS  : 
 (' '|'\t'|'\r'|'\n')+
 ;
 
terminal INT returns ecore::EInt:
	('0'..'9')+
;

terminal STRING :
	'"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
	"'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'" 
;

terminal ECLNUMBEREDTYPE:
	('UNICODE'|'STRING'|'UNSIGNED'|'INTEGER'|'QSTRING'|'VARSTRING'|'VARUNICODE'|'REAL')('0'..'9')*
;

terminal ECLDECIMALTYPE: 
	('DECIMAL')('0'..'9')*
;

//terminal UTOKEN: 
//	('_')('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'-')('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
//;

terminal GEN_BLOCK :
	'INLINE' -> 'ENDGENERATES'
;


