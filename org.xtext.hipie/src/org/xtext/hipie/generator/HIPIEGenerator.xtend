/*
 * generated by Xtext
 */
package org.xtext.hipie.generator

import org.eclipse.emf.ecore.resource.Resource
import java.lang.Process
import java.util.Scanner
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.core.resources.ResourcesPlugin
import java.io.FileInputStream
import java.net.URL
import org.eclipse.core.runtime.preferences.InstanceScope
import org.eclipse.core.resources.IResource
import org.eclipse.core.runtime.NullProgressMonitor
import org.eclipse.core.runtime.Path
import java.io.FileOutputStream
import java.util.ArrayList
import org.eclipse.core.resources.ProjectScope
import java.io.FileWriter
import java.io.File

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class HIPIEGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		var ws_root = ResourcesPlugin.getWorkspace().getRoot() 
			
		if (resource.URI.isPlatformResource()) {
			var platformString = resource.URI.toPlatformString(true)
			var resourceFile = ws_root.findMember(platformString)
			var project = resourceFile.project
				
			var projectScope = new ProjectScope(project) ;
			var projPrefs= projectScope.getNode("org.xtext.hipie.ui");
		
			// Get Compiler Location //
			val defaultCompilerPath = ResourcesPlugin.getWorkspace().getRoot().getRawLocation().toOSString() ;
			var workPrefs = InstanceScope.INSTANCE.getNode("org.xtext.hipie.ui");
			val compilerPath = new Path(workPrefs.get('Compiler Location' , defaultCompilerPath))
			
			// Get Data Source Selections //  
			var filename = resourceFile.name
			var selectedItems = projPrefs.node("data_prefs");
			var selectString = selectedItems.get("select_prefs_" + filename, "")
			var dataFileSelections = selectString.split(" ")
			var dataFilePaths = new ArrayList<Path>	
			for (i : 0..<dataFileSelections.size)
				if(dataFileSelections.get(i).length() > 0)
						dataFilePaths +=  new Path(dataFileSelections.get(i))		
					
			var ddlFilePath = resourceFile.projectRelativePath.removeFileExtension().addFileExtension("ddl")
			var ddlFile = project.getFile(ddlFilePath)
			println(ddlFile.rawLocation.toOSString)
			
			//  Generate DDL  //	
			var ddl_cmd = "java -cp "  + compilerPath.toOSString + " org/hpcc/HIPIE/commandline/CommandLineService -databomb " + resourceFile.rawLocation.toOSString() + " -o " + ddlFile.rawLocation.toOSString() + " -verbose"
			System.out.println(ddl_cmd)
			var proc = Runtime.getRuntime().exec(ddl_cmd) as Process
			var in = proc.inputStream
			var er = proc.errorStream
			var scVerbose = new Scanner(in)
			var scError = new Scanner(er)
			var streamString = new String
			var streamStringErrors = new String
			if (scVerbose.hasNext())
				streamString = scVerbose.useDelimiter("\\Z").next() ;
			if (scError.hasNext())
				streamStringErrors = scError.useDelimiter("\\Z").next() ;
			System.out.println(streamString)
			System.out.println(streamStringErrors)
			in.close()
			er.close() 	
		
			//  Generate DataBomb  //
			var databombFilePath =  resourceFile.projectRelativePath.removeFileExtension().addFileExtension("databomb");
			var databombFile = project.getFile(databombFilePath);
			var tempDatFilePaths = new ArrayList()
			
			for (i : 0..<dataFilePaths.size) {
				var datFilePath = dataFilePaths.get(i)
				var datFile = ws_root.getFile(datFilePath)
				var cmdLineArgs = selectedItems.get("cmd_line__prefs_" + datFile.name , "")
				var dataCmdString = "-csv " + ws_root.getFile(datFilePath).rawLocation.toOSString + " " + cmdLineArgs
				var tempFilePath = new Path(datFile.projectRelativePath.removeFileExtension.toOSString + "temp.databomb")
				tempDatFilePaths += tempFilePath
				var databombCmd = ""
				databombCmd = 'java -cp ' + compilerPath.toOSString + ' org/hpcc/HIPIE/commandline/CommandLineService ' + dataCmdString + ' -o ' + project.getFile(tempFilePath).rawLocation.toOSString 
				System.out.println(databombCmd)
				var procData = Runtime.getRuntime().exec(databombCmd) as Process				
				in = procData.inputStream
				er = procData.errorStream
				scVerbose = new Scanner(in)
				scError = new Scanner(er)
				streamString = new String
				streamStringErrors = new String
				if (scVerbose.hasNext())
					streamString = scVerbose.useDelimiter("\\Z").next() ;
				if (scError.hasNext())
					streamStringErrors = scError.useDelimiter("\\Z").next() ;
				println(streamString)
				println(streamStringErrors)
				println(dataCmdString)
				in.close()
				er.close()
				scVerbose.close()
				scError.close()
			}
			
			for (i : 0..<tempDatFilePaths.size) {
				var tempDatFile = project.getFile(tempDatFilePaths.get(i)).rawLocation.toOSString
				var inStream = new FileInputStream(tempDatFile);
				if (i == 0 && databombFile.exists())
					databombFile.delete(true,null)
				var fw = new FileWriter(databombFile.rawLocation.toOSString,true);
				var streamStringTemp = new String
				var scIn = new Scanner(inStream)
				if (scIn.hasNext())
					streamStringTemp = scIn.useDelimiter("\\Z").next()
				if(i != tempDatFilePaths.size-1 && tempDatFilePaths.size > 1)
				{
					streamStringTemp = streamStringTemp.substring(0, streamStringTemp.lastIndexOf("}"))
					streamStringTemp += ","
				}
				if(i != 0 && tempDatFilePaths.size > 1)
				{
					streamStringTemp = streamStringTemp.substring(streamStringTemp.indexOf("{")+1) 
				}
				fw.write(streamStringTemp)
				fw.close
				var file = new File(tempDatFile)
				file.delete
				inStream.close
			}
			
			// Creates an empty persist if there is none already //
			var perFilepath = resourceFile.projectRelativePath.removeFileExtension().addFileExtension("persist")
			var perFile =  project.getFile(perFilepath)
			if(!perFile.exists) {
				var fwPer = new FileWriter(perFile.rawLocation.toOSString)
				fwPer.close()
			}

			// Converts ddl file to string //
			var inStream = new FileInputStream(ddlFile.rawLocation.toOSString());			
			var streamStringDdl = new String
			var scIn = new Scanner(inStream)
			if (scIn.hasNext())
				streamStringDdl = scIn.useDelimiter("\\Z").next()
		
			streamStringDdl = streamStringDdl.replace("\n" , "")
			streamStringDdl = streamStringDdl.replace(" " , "")
			streamStringDdl = streamStringDdl.replace("\t" , "")
			streamStringDdl = streamStringDdl.replace("\r" , "")
			inStream.close() 
			scIn.close()
			
			// Converts databomb to cleaned string 
			inStream = new FileInputStream(databombFile.rawLocation.toOSString())
			var streamStringDatabomb = new String
			scIn = new Scanner(inStream)
			if (scIn.hasNext())
				streamStringDatabomb = scIn.useDelimiter("\\Z").next()
		
			streamStringDatabomb = streamStringDatabomb.replace("\n" , "")
			streamStringDatabomb = streamStringDatabomb.replace(" " , "")
			streamStringDatabomb = streamStringDatabomb.replace("\t" , "")
			streamStringDatabomb = streamStringDatabomb.replace("\r" , "")
			inStream.close()
			scIn.close()
			
			inStream = new FileInputStream(perFile.rawLocation.toOSString());
			var streamString_per = new String
			scIn = new Scanner(inStream)
			if (scIn.hasNext())
				streamString_per = scIn.useDelimiter("\\Z").next()
			streamString_per = streamString_per.replace("\n" , "")
			streamString_per = streamString_per.replace(" " , "")
			streamString_per = streamString_per.replace("\t" , "")
			streamString_per = streamString_per.replace("\r" , "")
			inStream.close()
			scIn.close()
			
			// Generate HTML //
			var url = new URL("platform:/plugin/org.xtext.hipie/vis_files/dermatology.html")		
			var inStreamConnection = url.openConnection().getInputStream()
			var streamStringHtml = new String
			scIn = new Scanner(inStreamConnection)
			if (scIn.hasNext())
				streamStringHtml = scIn.useDelimiter("\\Z").next() 
			
			streamStringHtml = streamStringHtml.replace("%_data_%" , streamStringDatabomb)
			streamStringHtml = streamStringHtml.replace("%_ddl_%" , streamStringDdl)
			streamStringHtml = streamStringHtml.replace("%_persist_%" , streamString_per)
			
			var htmlFilePath = resourceFile.projectRelativePath.removeFileExtension().addFileExtension("html")
			var htmlFile = project.getFile(htmlFilePath)
			var htmlOut = new FileOutputStream(htmlFile.rawLocation.toOSString)
			htmlOut.write(streamStringHtml.getBytes())
			project.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor())
			in.close()
			er.close() 	
			htmlOut.close()
		}
	}
}
