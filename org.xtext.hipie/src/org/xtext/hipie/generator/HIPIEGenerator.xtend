/*
 * generated by Xtext
 */
package org.xtext.hipie.generator

import org.eclipse.emf.ecore.resource.Resource
import java.lang.Process
import java.util.Scanner
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.core.resources.ResourcesPlugin
import java.io.FileInputStream
import java.net.URL
import org.eclipse.core.runtime.preferences.InstanceScope
import org.eclipse.core.resources.IResource
import org.eclipse.core.runtime.NullProgressMonitor
import org.eclipse.core.runtime.Path
import java.io.FileOutputStream
import javax.inject.Inject
import java.util.ArrayList
import org.eclipse.core.resources.ProjectScope
import org.eclipse.core.resources.IFile
import java.io.FileWriter
import java.io.File
import org.xtext.hipie.hIPIE.OutDataset

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class HIPIEGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		var ws_root = ResourcesPlugin.getWorkspace().getRoot() 
			
		if (resource.URI.isPlatformResource()) 
		{
			var platformString = resource.URI.toPlatformString(true)
			var resourceFile = ws_root.findMember(platformString)
			var project = resourceFile.project
				
			var projectScope = new ProjectScope(project) ;
			var proj_prefs= projectScope.getNode("org.xtext.hipie.ui");
		
			// Get Compiler Location //
			val defaultCompilerPath = ResourcesPlugin.getWorkspace().getRoot().getRawLocation().toOSString() ;
			var work_prefs = InstanceScope.INSTANCE.getNode("org.xtext.hipie.ui");
			val compilerPath = new Path(work_prefs.get('Compiler Location' , defaultCompilerPath))
		
			var filename = resourceFile.name
			var selected_items = proj_prefs.node("data_prefs");
			var select_string = selected_items.get("select_prefs_" + filename, "")
			var data_filestrings = select_string.split(" ")
			var data_filepaths = new ArrayList<Path>	
			for (i : 0..<data_filestrings.size)
				if(data_filestrings.get(i).length() > 0)
						data_filepaths +=  new Path(data_filestrings.get(i))		
					
			var ddlFilePath = resourceFile.projectRelativePath.removeFileExtension().addFileExtension("ddl")
			var ddlFile = project.getFile(ddlFilePath)
			println(ddlFile.rawLocation.toOSString)
			
			//  Generate DDL  //	
			var ddl_cmd = "java -cp "  + compilerPath.toOSString + " org/hpcc/HIPIE/commandline/CommandLineService -databomb " + resourceFile.rawLocation.toOSString() + " -o " + ddlFile.rawLocation.toOSString() + " -verbose"
			System.out.println(ddl_cmd)
			var proc = Runtime.getRuntime().exec(ddl_cmd) as Process
			var in = proc.inputStream
			var er = proc.errorStream
			var sc_verbose = new Scanner(in)
			var sc_er = new Scanner(er)
			var streamString = new String
			var streamString_er = new String
			if (sc_verbose.hasNext())
				streamString = sc_verbose.useDelimiter("\\Z").next() ;
			if (sc_er.hasNext())
				streamString_er = sc_er.useDelimiter("\\Z").next() ;
			System.out.println(streamString)
			System.out.println(streamString_er)
			in.close()
			er.close() 	
		
			//  Generate DataBomb  //
			var databombFilePath =  resourceFile.projectRelativePath.removeFileExtension().addFileExtension("databomb");
			var databombFile = project.getFile(databombFilePath);
			var temp_dat_files = new ArrayList()
			//var out_datasets = resource.allContents.toIterable.filter(OutDataset).toList.toArray
			
			for (i : 0..<temp_dat_files.size) {
				var dat_filepath = data_filepaths.get(i)
				var dat_file = ws_root.getFile(dat_filepath)
				var cmd_string = selected_items.get("cmd_line__prefs_" + dat_file.name , "")
				var data_cmd_string = "-csv " + ws_root.getFile(dat_filepath).rawLocation.toOSString + " " + cmd_string
				var temp_file_path = new Path(dat_file.projectRelativePath.removeFileExtension.toOSString + "temp.databomb")
				temp_dat_files += temp_file_path
				var dat_cmd = ""
				dat_cmd = 'java -cp ' + compilerPath.toOSString + ' org/hpcc/HIPIE/commandline/CommandLineService ' + data_cmd_string + ' -o ' + project.getFile(temp_file_path).rawLocation.toOSString 
				System.out.println(dat_cmd)
				var proc_data = Runtime.getRuntime().exec(dat_cmd) as Process				
				in = proc_data.inputStream
				er = proc_data.errorStream
				sc_verbose = new Scanner(in)
				sc_er = new Scanner(er)
				streamString = new String
				streamString_er = new String
				if (sc_verbose.hasNext())
					streamString = sc_verbose.useDelimiter("\\Z").next() ;
				if (sc_er.hasNext())
					streamString_er = sc_er.useDelimiter("\\Z").next() ;
				println(streamString)
				println(streamString_er)
				println(data_cmd_string)
				in.close()
				er.close()
				sc_verbose.close()
				sc_er.close()
			}
			for (i : 0..<temp_dat_files.size)
			{
				var temp_dat_filepath = project.getFile(temp_dat_files.get(i)).rawLocation.toOSString
				var in_stream = new FileInputStream(temp_dat_filepath);
				if (i == 0 && databombFile.exists())
					databombFile.delete(true,null)
				var fw = new FileWriter(databombFile.rawLocation.toOSString,true);
				var streamString_temp = new String
				var sc_in = new Scanner(in_stream)
				if (sc_in.hasNext())
					streamString_temp = sc_in.useDelimiter("\\Z").next()
				if(i != temp_dat_files.size-1 && temp_dat_files.size > 1)
				{
					streamString_temp = streamString_temp.substring(0, streamString_temp.lastIndexOf("}"))
					streamString_temp += ","
				}
				if(i != 0 && temp_dat_files.size > 1)
				{
					streamString_temp = streamString_temp.substring(streamString_temp.indexOf("{")+1) 
				}
				fw.write(streamString_temp)
				fw.close
				var file = new File(temp_dat_filepath)
				file.delete
				in_stream.close
			}
			
			// Creates an empty persist if there is none already //
			var perFilepath = resourceFile.projectRelativePath.removeFileExtension().addFileExtension("persist")
			var perFile =  project.getFile(perFilepath)
			if(!perFile.exists)
			{
				var fw_per = new FileWriter(perFile.rawLocation.toOSString)
				fw_per.close()
			}

			// Converts ddl file to string //
			var in_stream = new FileInputStream(ddlFile.rawLocation.toOSString());			
			var streamString_ddl = new String
			var sc_in = new Scanner(in_stream)
			if (sc_in.hasNext())
				streamString_ddl = sc_in.useDelimiter("\\Z").next()
		
			streamString_ddl = streamString_ddl.replace("\n" , "")
			streamString_ddl = streamString_ddl.replace(" " , "")
			streamString_ddl = streamString_ddl.replace("\t" , "")
			streamString_ddl = streamString_ddl.replace("\r" , "")
			in_stream.close() 
			sc_in.close()
			
			// Converts databomb to cleaned string 
			in_stream = new FileInputStream(databombFile.rawLocation.toOSString())
			var streamString_databomb = new String
			sc_in = new Scanner(in_stream)
			if (sc_in.hasNext())
				streamString_databomb = sc_in.useDelimiter("\\Z").next()
		
			streamString_databomb = streamString_databomb.replace("\n" , "")
			streamString_databomb = streamString_databomb.replace(" " , "")
			streamString_databomb = streamString_databomb.replace("\t" , "")
			streamString_databomb = streamString_databomb.replace("\r" , "")
			in_stream.close()
			sc_in.close()
			
			in_stream = new FileInputStream(perFile.rawLocation.toOSString());
			var streamString_per = new String
			sc_in = new Scanner(in_stream)
			if (sc_in.hasNext())
				streamString_per = sc_in.useDelimiter("\\Z").next()
			streamString_per = streamString_per.replace("\n" , "")
			streamString_per = streamString_per.replace(" " , "")
			streamString_per = streamString_per.replace("\t" , "")
			streamString_per = streamString_per.replace("\r" , "")
			in_stream.close()
			sc_in.close()
			
			// Generate HTML //
			var url = new URL("platform:/plugin/org.xtext.hipie/vis_files/marsh.html")		
			var n = url.openConnection().getInputStream()
			var streamString_html = new String
			sc_in = new Scanner(n)
			if (sc_in.hasNext())
				streamString_html = sc_in.useDelimiter("\\Z").next() 
			
			streamString_html = streamString_html.replace("%_data_%" , streamString_databomb)
			streamString_html = streamString_html.replace("%_ddl_%" , streamString_ddl)
			streamString_html = streamString_html.replace("%_persist_%" , streamString_per)
			
			var htmlFilePath = resourceFile.projectRelativePath.removeFileExtension().addFileExtension("html")
			var htmlFile = project.getFile(htmlFilePath)
			var html_out = new FileOutputStream(htmlFile.rawLocation.toOSString)
			html_out.write(streamString_html.getBytes())
			project.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor())
			in.close()
			er.close() 	
			html_out.close()
		}
	}
}
